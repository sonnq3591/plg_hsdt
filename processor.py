import os
import shutil
from pathlib import Path
import openai
from docx import Document
from docx.shared import Pt
import PyPDF2
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

class VietnameseProcurementProcessor:
    def __init__(self):
        """Initialize the processor with OpenAI API key from .env"""
        self.openai_api_key = os.getenv('OPENAI_API_KEY')
        if not self.openai_api_key:
            raise ValueError("‚ùå OPENAI_API_KEY not found in .env file!")
        
        openai.api_key = self.openai_api_key
        self.pdf_folder = Path("pdf_inputs")
        self.template_file = "02_MUC_DO_HIEU_BIET_template.docx"
        self.output_file = "02_MUC_DO_HIEU_BIET_output.docx"
        
        # Create PDF folder if it doesn't exist
        self.pdf_folder.mkdir(exist_ok=True)
        
        # Expected PDF files
        self.pdf_files = {
            'TBMT': 'TBMT.pdf',
            'CHUONG_V': 'CHUONG_V.pdf', 
            'BMMT': 'BMMT.pdf',
            'CHUONG_III': 'CHUONG_III.pdf',
            'HSMT': 'HSMT.pdf'
        }
        
        print(f"üìÅ Created project structure:")
        print(f"   - PDF folder: {self.pdf_folder}")
        print(f"   - Template: {self.template_file}")
        print(f"   - Output: {self.output_file}")
        print(f"\nüìã Please place these PDFs in the '{self.pdf_folder}' folder:")
        for pdf in self.pdf_files.values():
            print(f"   - {pdf}")

    def extract_text_from_pdf(self, pdf_path):
        """Extract text content from PDF file"""
        try:
            text = ""
            with open(pdf_path, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                for page in pdf_reader.pages:
                    text += page.extract_text() + "\n"
            return text
        except Exception as e:
            print(f"‚ùå Error reading {pdf_path}: {str(e)}")
            return None

    def ask_openai_for_ten_goi_thau(self, tbmt_content):
        """Ask OpenAI to extract 'ten_goi_thau' from TBMT.pdf content"""
        prompt = f"""
B·∫°n l√† chuy√™n gia ph√¢n t√≠ch t√†i li·ªáu ƒë·∫•u th·∫ßu Vi·ªát Nam.

T·ª´ n·ªôi dung t√†i li·ªáu TBMT (Th√¥ng b√°o m·ªùi th·∫ßu) d∆∞·ªõi ƒë√¢y, h√£y t√¨m v√† tr√≠ch xu·∫•t CH√çNH X√ÅC t√™n g√≥i th·∫ßu.

H∆Ø·ªöNG D·∫™N C·ª§ TH·ªÇ:
T√™n g√≥i th·∫ßu n·∫±m trong b·∫£ng "Th√¥ng tin g√≥i th·∫ßu" ho·∫∑c t∆∞∆°ng t·ª±, t·∫°i d√≤ng c√≥:
- C·ªôt tr√°i: "T√™n g√≥i th·∫ßu" (c√≥ th·ªÉ vi·∫øt l√† "T√™n d·ª± √°n", "T√™n g√≥i", "Package name")
- C·ªôt ph·∫£i: [T√äN G√ìI TH·∫¶U TH·ª∞C T·∫æ]

C√°c c√°ch vi·∫øt c√≥ th·ªÉ g·∫∑p:
- "T√™n g√≥i th·∫ßu" | "Ch·ªânh l√Ω t√†i li·ªáu..."
- "T√™n d·ª± √°n" | "Ch·ªânh l√Ω t√†i li·ªáu..."  
- "Package name" | "Ch·ªânh l√Ω t√†i li·ªáu..."
- "T√™n g√≥i" | "Ch·ªânh l√Ω t√†i li·ªáu..."

Y√äU C·∫¶U:
1. CH·ªà l·∫•y n·ªôi dung t·ª´ c·ªôt b√™n PH·∫¢I c·ªßa d√≤ng "T√™n g√≥i th·∫ßu"
2. KH√îNG l·∫•y t·ª´ ti√™u ƒë·ªÅ t√†i li·ªáu ho·∫∑c n∆°i kh√°c
3. KH√îNG bao g·ªìm m√£ s·ªë g√≥i th·∫ßu
4. Tr√≠ch xu·∫•t CH√çNH X√ÅC, gi·ªØ nguy√™n d·∫•u c√¢u ti·∫øng Vi·ªát
5. Tr·∫£ v·ªÅ CH·ªà t√™n g√≥i th·∫ßu, kh√¥ng gi·∫£i th√≠ch

ƒê·ªäNH D·∫†NG MONG ƒê·ª¢I:
T√¨m c·∫•u tr√∫c b·∫£ng d·∫°ng:
```
| T√™n g√≥i th·∫ßu | [T√äN C·∫¶N TR√çCH XU·∫§T] |
```

N·ªòI DUNG TBMT:
{tbmt_content}

T√äN G√ìI TH·∫¶U (ch·ªâ n·ªôi dung c·ªôt ph·∫£i):"""

        try:
            response = openai.ChatCompletion.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "B·∫°n l√† chuy√™n gia tr√≠ch xu·∫•t th√¥ng tin t·ª´ b·∫£ng trong t√†i li·ªáu ƒë·∫•u th·∫ßu Vi·ªát Nam. Ch·ªâ tr·∫£ v·ªÅ n·ªôi dung ƒë∆∞·ª£c y√™u c·∫ßu t·ª´ c·ªôt c·ª• th·ªÉ trong b·∫£ng."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=300,
                temperature=0.0  # Even more deterministic
            )
            
            extracted_text = response.choices[0].message.content.strip()
            
            # Clean up any extra quotes or formatting
            if extracted_text.startswith('"') and extracted_text.endswith('"'):
                extracted_text = extracted_text[1:-1]
            
            print(f"üéØ OpenAI extracted from table: '{extracted_text}'")
            return extracted_text
            
        except Exception as e:
            print(f"‚ùå OpenAI API Error: {str(e)}")
            return "[KH√îNG T√åM TH·∫§Y]"

    def copy_template_to_output(self):
        """Copy template file to output file"""
        try:
            if not os.path.exists(self.template_file):
                print(f"‚ùå Template file not found: {self.template_file}")
                return False
            
            shutil.copy2(self.template_file, self.output_file)
            print(f"‚úÖ Copied template to output file: {self.output_file}")
            return True
            
        except Exception as e:
            print(f"‚ùå Error copying template: {str(e)}")
            return False

    def replace_placeholder_in_docx(self, placeholder, content):
        """Replace placeholder in DOCX file while preserving exact formatting - simplified approach"""
        try:
            doc = Document(self.output_file)
            replaced = False
            
            print(f"üîç Looking for placeholder: '{placeholder}'")
            print(f"üîÑ Will replace with: '{content}'")
            
            # Simple approach: Replace in paragraphs
            for para_idx, paragraph in enumerate(doc.paragraphs):
                full_text = paragraph.text
                if placeholder in full_text:
                    print(f"üìç Found placeholder in paragraph {para_idx}")
                    
                    # Build the replacement character by character to preserve formatting
                    placeholder_start = full_text.find(placeholder)
                    placeholder_end = placeholder_start + len(placeholder)
                    
                    # Find which runs contain the placeholder
                    char_count = 0
                    start_run_idx = -1
                    end_run_idx = -1
                    start_char_in_run = 0
                    end_char_in_run = 0
                    
                    for run_idx, run in enumerate(paragraph.runs):
                        run_len = len(run.text)
                        
                        # Check if placeholder starts in this run
                        if start_run_idx == -1 and char_count <= placeholder_start < char_count + run_len:
                            start_run_idx = run_idx
                            start_char_in_run = placeholder_start - char_count
                        
                        # Check if placeholder ends in this run
                        if char_count < placeholder_end <= char_count + run_len:
                            end_run_idx = run_idx
                            end_char_in_run = placeholder_end - char_count
                            break
                            
                        char_count += run_len
                    
                    if start_run_idx >= 0 and end_run_idx >= 0:
                        print(f"üìç Placeholder spans from run {start_run_idx} to run {end_run_idx}")
                        
                        # Case 1: Placeholder is within a single run
                        if start_run_idx == end_run_idx:
                            run = paragraph.runs[start_run_idx]
                            old_text = run.text
                            new_text = old_text[:start_char_in_run] + content + old_text[end_char_in_run:]
                            run.text = new_text
                            print(f"‚úÖ Single run replacement: '{old_text}' ‚Üí '{new_text}'")
                            
                        # Case 2: Placeholder spans multiple runs
                        else:
                            # Clear placeholder from all affected runs
                            for i in range(start_run_idx, end_run_idx + 1):
                                run = paragraph.runs[i]
                                if i == start_run_idx:
                                    # Keep text before placeholder
                                    run.text = run.text[:start_char_in_run]
                                elif i == end_run_idx:
                                    # Keep text after placeholder and add content
                                    run.text = content + run.text[end_char_in_run:]
                                else:
                                    # Clear middle runs
                                    run.text = ""
                            print(f"‚úÖ Multi-run replacement completed")
                        
                        replaced = True
                        break  # Only replace first occurrence
            
            # Also check tables with same logic
            for table in doc.tables:
                for row in table.rows:
                    for cell in row.cells:
                        for paragraph in cell.paragraphs:
                            full_text = paragraph.text
                            if placeholder in full_text:
                                print(f"üìç Found placeholder in table cell")
                                
                                # Simple replacement for table cells
                                for run in paragraph.runs:
                                    if placeholder in run.text:
                                        run.text = run.text.replace(placeholder, content)
                                        replaced = True
                                        break
            
            doc.save(self.output_file)
            
            if replaced:
                print(f"‚úÖ Successfully replaced {placeholder}")
            else:
                print(f"‚ùå Failed to find {placeholder}")
            
            return replaced
            
        except Exception as e:
            print(f"‚ùå Error replacing placeholder: {str(e)}")
            import traceback
            traceback.print_exc()
            return False

    def test_ten_goi_thau_extraction(self):
        """Test extraction of 'ten_goi_thau' from TBMT.pdf"""
        print("\nüß™ TESTING: {{ten_goi_thau}} extraction from TBMT.pdf")
        print("=" * 60)
        
        # Check if TBMT.pdf exists
        tbmt_file = self.pdf_folder / self.pdf_files['TBMT']
        if not tbmt_file.exists():
            print(f"‚ùå File not found: {tbmt_file}")
            print(f"üìã Please place TBMT.pdf in the '{self.pdf_folder}' folder")
            return False
        
        # Extract text from TBMT.pdf
        print("üìñ Reading TBMT.pdf...")
        tbmt_content = self.extract_text_from_pdf(tbmt_file)
        if not tbmt_content:
            return False
        
        print(f"‚úÖ Extracted {len(tbmt_content)} characters from TBMT.pdf")
        
        # Show preview of content
        preview = tbmt_content[:500] + "..." if len(tbmt_content) > 500 else tbmt_content
        print(f"üìÑ Content preview:\n{preview}\n")
        
        # Ask OpenAI to extract ten_goi_thau
        print("ü§ñ Asking OpenAI to extract 'ten_goi_thau'...")
        ten_goi_thau = self.ask_openai_for_ten_goi_thau(tbmt_content)
        
        print(f"üìù Extracted 'ten_goi_thau': {ten_goi_thau}")
        
        # Copy template and replace placeholder
        if self.copy_template_to_output():
            if self.replace_placeholder_in_docx("{{ten_goi_thau}}", ten_goi_thau):
                print(f"‚úÖ SUCCESS: {{ten_goi_thau}} has been processed!")
                print(f"üìÑ Check output file: {self.output_file}")
                return True
        
        return False

def main():
    print("üáªüá≥ Vietnamese Procurement Document Processor")
    print("=" * 50)
    
    try:
        # Initialize processor (API key loaded from .env)
        processor = VietnameseProcurementProcessor()
        print("‚úÖ Environment loaded successfully")
        
        # Test ten_goi_thau extraction
        processor.test_ten_goi_thau_extraction()
        
    except ValueError as e:
        print(e)
        print("üí° Please create a .env file with: OPENAI_API_KEY=your_key_here")
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")

if __name__ == "__main__":
    main()